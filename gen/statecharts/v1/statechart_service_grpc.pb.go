// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: statecharts/v1/statechart_service.proto

package statechartsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatechartServiceClient is the client API for StatechartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatechartServiceClient interface {
	// Create a new machine.
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*CreateMachineResponse, error)
	// Step a statechart through a single iteration.
	Step(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepResponse, error)
}

type statechartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatechartServiceClient(cc grpc.ClientConnInterface) StatechartServiceClient {
	return &statechartServiceClient{cc}
}

func (c *statechartServiceClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*CreateMachineResponse, error) {
	out := new(CreateMachineResponse)
	err := c.cc.Invoke(ctx, "/statecharts.v1.StatechartService/CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statechartServiceClient) Step(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepResponse, error) {
	out := new(StepResponse)
	err := c.cc.Invoke(ctx, "/statecharts.v1.StatechartService/Step", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatechartServiceServer is the server API for StatechartService service.
// All implementations must embed UnimplementedStatechartServiceServer
// for forward compatibility
type StatechartServiceServer interface {
	// Create a new machine.
	CreateMachine(context.Context, *CreateMachineRequest) (*CreateMachineResponse, error)
	// Step a statechart through a single iteration.
	Step(context.Context, *StepRequest) (*StepResponse, error)
	mustEmbedUnimplementedStatechartServiceServer()
}

// UnimplementedStatechartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatechartServiceServer struct {
}

func (UnimplementedStatechartServiceServer) CreateMachine(context.Context, *CreateMachineRequest) (*CreateMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (UnimplementedStatechartServiceServer) Step(context.Context, *StepRequest) (*StepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Step not implemented")
}
func (UnimplementedStatechartServiceServer) mustEmbedUnimplementedStatechartServiceServer() {}

// UnsafeStatechartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatechartServiceServer will
// result in compilation errors.
type UnsafeStatechartServiceServer interface {
	mustEmbedUnimplementedStatechartServiceServer()
}

func RegisterStatechartServiceServer(s grpc.ServiceRegistrar, srv StatechartServiceServer) {
	s.RegisterService(&StatechartService_ServiceDesc, srv)
}

func _StatechartService_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatechartServiceServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statecharts.v1.StatechartService/CreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatechartServiceServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatechartService_Step_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatechartServiceServer).Step(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statecharts.v1.StatechartService/Step",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatechartServiceServer).Step(ctx, req.(*StepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatechartService_ServiceDesc is the grpc.ServiceDesc for StatechartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatechartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statecharts.v1.StatechartService",
	HandlerType: (*StatechartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMachine",
			Handler:    _StatechartService_CreateMachine_Handler,
		},
		{
			MethodName: "Step",
			Handler:    _StatechartService_Step_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statecharts/v1/statechart_service.proto",
}
