// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: validation/v1/validator.proto

package validationv1

import (
	v1 "github.com/tmc/sc/statecharts/v1"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Severity defines the severity level of a validation violation.
type Severity int32

const (
	Severity_SEVERITY_UNSPECIFIED Severity = 0 // Unspecified severity.
	Severity_INFO                 Severity = 1 // Informational message, not a violation.
	Severity_WARNING              Severity = 2 // Warning, potentially problematic but not critical.
	Severity_ERROR                Severity = 3 // Error, severe violation that must be fixed.
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "INFO",
		2: "WARNING",
		3: "ERROR",
	}
	Severity_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"INFO":                 1,
		"WARNING":              2,
		"ERROR":                3,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_validation_v1_validator_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_validation_v1_validator_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_validation_v1_validator_proto_rawDescGZIP(), []int{0}
}

// *
// RuleId identifies specific validation rules for statecharts.
type RuleId int32

const (
	RuleId_RULE_UNSPECIFIED                   RuleId = 0 // Unspecified rule.
	RuleId_UNIQUE_STATE_LABELS                RuleId = 1 // All state labels must be unique.
	RuleId_SINGLE_DEFAULT_CHILD               RuleId = 2 // XOR composite states must have exactly one default child.
	RuleId_BASIC_HAS_NO_CHILDREN              RuleId = 3 // Basic states cannot have children.
	RuleId_COMPOUND_HAS_CHILDREN              RuleId = 4 // Compound states must have children.
	RuleId_DETERMINISTIC_TRANSITION_SELECTION RuleId = 5 // Transition selection must be deterministic.
	RuleId_NO_EVENT_BROADCAST_CYCLES          RuleId = 6 // Event broadcast must not create cycles.
)

// Enum value maps for RuleId.
var (
	RuleId_name = map[int32]string{
		0: "RULE_UNSPECIFIED",
		1: "UNIQUE_STATE_LABELS",
		2: "SINGLE_DEFAULT_CHILD",
		3: "BASIC_HAS_NO_CHILDREN",
		4: "COMPOUND_HAS_CHILDREN",
		5: "DETERMINISTIC_TRANSITION_SELECTION",
		6: "NO_EVENT_BROADCAST_CYCLES",
	}
	RuleId_value = map[string]int32{
		"RULE_UNSPECIFIED":                   0,
		"UNIQUE_STATE_LABELS":                1,
		"SINGLE_DEFAULT_CHILD":               2,
		"BASIC_HAS_NO_CHILDREN":              3,
		"COMPOUND_HAS_CHILDREN":              4,
		"DETERMINISTIC_TRANSITION_SELECTION": 5,
		"NO_EVENT_BROADCAST_CYCLES":          6,
	}
)

func (x RuleId) Enum() *RuleId {
	p := new(RuleId)
	*p = x
	return p
}

func (x RuleId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleId) Descriptor() protoreflect.EnumDescriptor {
	return file_validation_v1_validator_proto_enumTypes[1].Descriptor()
}

func (RuleId) Type() protoreflect.EnumType {
	return &file_validation_v1_validator_proto_enumTypes[1]
}

func (x RuleId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleId.Descriptor instead.
func (RuleId) EnumDescriptor() ([]byte, []int) {
	return file_validation_v1_validator_proto_rawDescGZIP(), []int{1}
}

// *
// ValidateChartRequest is the request message for validating a statechart.
// It contains the statechart to validate and an optional list of rules to ignore.
type ValidateChartRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chart         *v1.Statechart         `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`                                                                              // The statechart to validate.
	IgnoreRules   []RuleId               `protobuf:"varint,2,rep,packed,name=ignore_rules,json=ignoreRules,proto3,enum=statecharts.validation.v1.RuleId" json:"ignore_rules,omitempty"` // Optional list of rules to ignore during validation.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateChartRequest) Reset() {
	*x = ValidateChartRequest{}
	mi := &file_validation_v1_validator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateChartRequest) ProtoMessage() {}

func (x *ValidateChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_validation_v1_validator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateChartRequest.ProtoReflect.Descriptor instead.
func (*ValidateChartRequest) Descriptor() ([]byte, []int) {
	return file_validation_v1_validator_proto_rawDescGZIP(), []int{0}
}

func (x *ValidateChartRequest) GetChart() *v1.Statechart {
	if x != nil {
		return x.Chart
	}
	return nil
}

func (x *ValidateChartRequest) GetIgnoreRules() []RuleId {
	if x != nil {
		return x.IgnoreRules
	}
	return nil
}

// *
// ValidateTraceRequest is the request message for validating a trace.
// It contains the statechart and trace to validate, and an optional list of rules to ignore.
type ValidateTraceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chart         *v1.Statechart         `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`                                                                              // The statechart definition.
	Trace         []*v1.Machine          `protobuf:"bytes,2,rep,name=trace,proto3" json:"trace,omitempty"`                                                                              // The trace of machine states to validate.
	IgnoreRules   []RuleId               `protobuf:"varint,3,rep,packed,name=ignore_rules,json=ignoreRules,proto3,enum=statecharts.validation.v1.RuleId" json:"ignore_rules,omitempty"` // Optional list of rules to ignore during validation.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateTraceRequest) Reset() {
	*x = ValidateTraceRequest{}
	mi := &file_validation_v1_validator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTraceRequest) ProtoMessage() {}

func (x *ValidateTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_validation_v1_validator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTraceRequest.ProtoReflect.Descriptor instead.
func (*ValidateTraceRequest) Descriptor() ([]byte, []int) {
	return file_validation_v1_validator_proto_rawDescGZIP(), []int{1}
}

func (x *ValidateTraceRequest) GetChart() *v1.Statechart {
	if x != nil {
		return x.Chart
	}
	return nil
}

func (x *ValidateTraceRequest) GetTrace() []*v1.Machine {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *ValidateTraceRequest) GetIgnoreRules() []RuleId {
	if x != nil {
		return x.IgnoreRules
	}
	return nil
}

// *
// ValidateChartResponse is the response message for chart validation.
// It contains a status and a list of violations found during validation.
type ValidateChartResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`         // The overall validation status.
	Violations    []*Violation           `protobuf:"bytes,2,rep,name=violations,proto3" json:"violations,omitempty"` // List of violations found, if any.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateChartResponse) Reset() {
	*x = ValidateChartResponse{}
	mi := &file_validation_v1_validator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateChartResponse) ProtoMessage() {}

func (x *ValidateChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_validation_v1_validator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateChartResponse.ProtoReflect.Descriptor instead.
func (*ValidateChartResponse) Descriptor() ([]byte, []int) {
	return file_validation_v1_validator_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateChartResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ValidateChartResponse) GetViolations() []*Violation {
	if x != nil {
		return x.Violations
	}
	return nil
}

// *
// ValidateTraceResponse is the response message for trace validation.
// It contains a status and a list of violations found during validation.
type ValidateTraceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`         // The overall validation status.
	Violations    []*Violation           `protobuf:"bytes,2,rep,name=violations,proto3" json:"violations,omitempty"` // List of violations found, if any.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateTraceResponse) Reset() {
	*x = ValidateTraceResponse{}
	mi := &file_validation_v1_validator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTraceResponse) ProtoMessage() {}

func (x *ValidateTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_validation_v1_validator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTraceResponse.ProtoReflect.Descriptor instead.
func (*ValidateTraceResponse) Descriptor() ([]byte, []int) {
	return file_validation_v1_validator_proto_rawDescGZIP(), []int{3}
}

func (x *ValidateTraceResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ValidateTraceResponse) GetViolations() []*Violation {
	if x != nil {
		return x.Violations
	}
	return nil
}

// *
// Violation represents a rule violation found during validation.
// It includes the rule that was violated, the severity, a message, and optional location hints.
type Violation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rule          RuleId                 `protobuf:"varint,1,opt,name=rule,proto3,enum=statecharts.validation.v1.RuleId" json:"rule,omitempty"`           // The rule that was violated.
	Severity      Severity               `protobuf:"varint,2,opt,name=severity,proto3,enum=statecharts.validation.v1.Severity" json:"severity,omitempty"` // The severity of the violation.
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                                            // A human-readable message describing the violation.
	Xpath         []string               `protobuf:"bytes,4,rep,name=xpath,proto3" json:"xpath,omitempty"`                                                // Location hints (optional).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Violation) Reset() {
	*x = Violation{}
	mi := &file_validation_v1_validator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Violation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Violation) ProtoMessage() {}

func (x *Violation) ProtoReflect() protoreflect.Message {
	mi := &file_validation_v1_validator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Violation.ProtoReflect.Descriptor instead.
func (*Violation) Descriptor() ([]byte, []int) {
	return file_validation_v1_validator_proto_rawDescGZIP(), []int{4}
}

func (x *Violation) GetRule() RuleId {
	if x != nil {
		return x.Rule
	}
	return RuleId_RULE_UNSPECIFIED
}

func (x *Violation) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *Violation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Violation) GetXpath() []string {
	if x != nil {
		return x.Xpath
	}
	return nil
}

var File_validation_v1_validator_proto protoreflect.FileDescriptor

const file_validation_v1_validator_proto_rawDesc = "" +
	"\n" +
	"\x1dvalidation/v1/validator.proto\x12\x19statecharts.validation.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x17google/rpc/status.proto\x1a statecharts/v1/statecharts.proto\"\x8e\x01\n" +
	"\x14ValidateChartRequest\x120\n" +
	"\x05chart\x18\x01 \x01(\v2\x1a.statecharts.v1.StatechartR\x05chart\x12D\n" +
	"\fignore_rules\x18\x02 \x03(\x0e2!.statecharts.validation.v1.RuleIdR\vignoreRules\"\xbd\x01\n" +
	"\x14ValidateTraceRequest\x120\n" +
	"\x05chart\x18\x01 \x01(\v2\x1a.statecharts.v1.StatechartR\x05chart\x12-\n" +
	"\x05trace\x18\x02 \x03(\v2\x17.statecharts.v1.MachineR\x05trace\x12D\n" +
	"\fignore_rules\x18\x03 \x03(\x0e2!.statecharts.validation.v1.RuleIdR\vignoreRules\"\x89\x01\n" +
	"\x15ValidateChartResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.google.rpc.StatusR\x06status\x12D\n" +
	"\n" +
	"violations\x18\x02 \x03(\v2$.statecharts.validation.v1.ViolationR\n" +
	"violations\"\x89\x01\n" +
	"\x15ValidateTraceResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.google.rpc.StatusR\x06status\x12D\n" +
	"\n" +
	"violations\x18\x02 \x03(\v2$.statecharts.validation.v1.ViolationR\n" +
	"violations\"\xb3\x01\n" +
	"\tViolation\x125\n" +
	"\x04rule\x18\x01 \x01(\x0e2!.statecharts.validation.v1.RuleIdR\x04rule\x12?\n" +
	"\bseverity\x18\x02 \x01(\x0e2#.statecharts.validation.v1.SeverityR\bseverity\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x14\n" +
	"\x05xpath\x18\x04 \x03(\tR\x05xpath*F\n" +
	"\bSeverity\x12\x18\n" +
	"\x14SEVERITY_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04INFO\x10\x01\x12\v\n" +
	"\aWARNING\x10\x02\x12\t\n" +
	"\x05ERROR\x10\x03*\xce\x01\n" +
	"\x06RuleId\x12\x14\n" +
	"\x10RULE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13UNIQUE_STATE_LABELS\x10\x01\x12\x18\n" +
	"\x14SINGLE_DEFAULT_CHILD\x10\x02\x12\x19\n" +
	"\x15BASIC_HAS_NO_CHILDREN\x10\x03\x12\x19\n" +
	"\x15COMPOUND_HAS_CHILDREN\x10\x04\x12&\n" +
	"\"DETERMINISTIC_TRANSITION_SELECTION\x10\x05\x12\x1d\n" +
	"\x19NO_EVENT_BROADCAST_CYCLES\x10\x062\xfb\x01\n" +
	"\x11SemanticValidator\x12r\n" +
	"\rValidateChart\x12/.statecharts.validation.v1.ValidateChartRequest\x1a0.statecharts.validation.v1.ValidateChartResponse\x12r\n" +
	"\rValidateTrace\x12/.statecharts.validation.v1.ValidateTraceRequest\x1a0.statecharts.validation.v1.ValidateTraceResponseB\xe3\x01\n" +
	"\x1dcom.statecharts.validation.v1B\x0eValidatorProtoP\x01Z,github.com/tmc/sc/validation/v1;validationv1\xa2\x02\x03SVX\xaa\x02\x19Statecharts.Validation.V1\xca\x02\x19Statecharts\\Validation\\V1\xe2\x02%Statecharts\\Validation\\V1\\GPBMetadata\xea\x02\x1bStatecharts::Validation::V1b\x06proto3"

var (
	file_validation_v1_validator_proto_rawDescOnce sync.Once
	file_validation_v1_validator_proto_rawDescData []byte
)

func file_validation_v1_validator_proto_rawDescGZIP() []byte {
	file_validation_v1_validator_proto_rawDescOnce.Do(func() {
		file_validation_v1_validator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_validation_v1_validator_proto_rawDesc), len(file_validation_v1_validator_proto_rawDesc)))
	})
	return file_validation_v1_validator_proto_rawDescData
}

var file_validation_v1_validator_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_validation_v1_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_validation_v1_validator_proto_goTypes = []any{
	(Severity)(0),                 // 0: statecharts.validation.v1.Severity
	(RuleId)(0),                   // 1: statecharts.validation.v1.RuleId
	(*ValidateChartRequest)(nil),  // 2: statecharts.validation.v1.ValidateChartRequest
	(*ValidateTraceRequest)(nil),  // 3: statecharts.validation.v1.ValidateTraceRequest
	(*ValidateChartResponse)(nil), // 4: statecharts.validation.v1.ValidateChartResponse
	(*ValidateTraceResponse)(nil), // 5: statecharts.validation.v1.ValidateTraceResponse
	(*Violation)(nil),             // 6: statecharts.validation.v1.Violation
	(*v1.Statechart)(nil),         // 7: statecharts.v1.Statechart
	(*v1.Machine)(nil),            // 8: statecharts.v1.Machine
	(*status.Status)(nil),         // 9: google.rpc.Status
}
var file_validation_v1_validator_proto_depIdxs = []int32{
	7,  // 0: statecharts.validation.v1.ValidateChartRequest.chart:type_name -> statecharts.v1.Statechart
	1,  // 1: statecharts.validation.v1.ValidateChartRequest.ignore_rules:type_name -> statecharts.validation.v1.RuleId
	7,  // 2: statecharts.validation.v1.ValidateTraceRequest.chart:type_name -> statecharts.v1.Statechart
	8,  // 3: statecharts.validation.v1.ValidateTraceRequest.trace:type_name -> statecharts.v1.Machine
	1,  // 4: statecharts.validation.v1.ValidateTraceRequest.ignore_rules:type_name -> statecharts.validation.v1.RuleId
	9,  // 5: statecharts.validation.v1.ValidateChartResponse.status:type_name -> google.rpc.Status
	6,  // 6: statecharts.validation.v1.ValidateChartResponse.violations:type_name -> statecharts.validation.v1.Violation
	9,  // 7: statecharts.validation.v1.ValidateTraceResponse.status:type_name -> google.rpc.Status
	6,  // 8: statecharts.validation.v1.ValidateTraceResponse.violations:type_name -> statecharts.validation.v1.Violation
	1,  // 9: statecharts.validation.v1.Violation.rule:type_name -> statecharts.validation.v1.RuleId
	0,  // 10: statecharts.validation.v1.Violation.severity:type_name -> statecharts.validation.v1.Severity
	2,  // 11: statecharts.validation.v1.SemanticValidator.ValidateChart:input_type -> statecharts.validation.v1.ValidateChartRequest
	3,  // 12: statecharts.validation.v1.SemanticValidator.ValidateTrace:input_type -> statecharts.validation.v1.ValidateTraceRequest
	4,  // 13: statecharts.validation.v1.SemanticValidator.ValidateChart:output_type -> statecharts.validation.v1.ValidateChartResponse
	5,  // 14: statecharts.validation.v1.SemanticValidator.ValidateTrace:output_type -> statecharts.validation.v1.ValidateTraceResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_validation_v1_validator_proto_init() }
func file_validation_v1_validator_proto_init() {
	if File_validation_v1_validator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_validation_v1_validator_proto_rawDesc), len(file_validation_v1_validator_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_validation_v1_validator_proto_goTypes,
		DependencyIndexes: file_validation_v1_validator_proto_depIdxs,
		EnumInfos:         file_validation_v1_validator_proto_enumTypes,
		MessageInfos:      file_validation_v1_validator_proto_msgTypes,
	}.Build()
	File_validation_v1_validator_proto = out.File
	file_validation_v1_validator_proto_goTypes = nil
	file_validation_v1_validator_proto_depIdxs = nil
}
