// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: validation/v1/validator.proto

package validationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SemanticValidator_ValidateChart_FullMethodName = "/statecharts.validation.v1.SemanticValidator/ValidateChart"
	SemanticValidator_ValidateTrace_FullMethodName = "/statecharts.validation.v1.SemanticValidator/ValidateTrace"
)

// SemanticValidatorClient is the client API for SemanticValidator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// SemanticValidator service provides methods to validate statecharts and traces.
// It applies semantic validation rules to ensure correctness of statechart definitions.
type SemanticValidatorClient interface {
	// ValidateChart validates a statechart definition against semantic rules.
	ValidateChart(ctx context.Context, in *ValidateChartRequest, opts ...grpc.CallOption) (*ValidateChartResponse, error)
	// ValidateTrace validates a statechart and a trace of machine states.
	ValidateTrace(ctx context.Context, in *ValidateTraceRequest, opts ...grpc.CallOption) (*ValidateTraceResponse, error)
}

type semanticValidatorClient struct {
	cc grpc.ClientConnInterface
}

func NewSemanticValidatorClient(cc grpc.ClientConnInterface) SemanticValidatorClient {
	return &semanticValidatorClient{cc}
}

func (c *semanticValidatorClient) ValidateChart(ctx context.Context, in *ValidateChartRequest, opts ...grpc.CallOption) (*ValidateChartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateChartResponse)
	err := c.cc.Invoke(ctx, SemanticValidator_ValidateChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semanticValidatorClient) ValidateTrace(ctx context.Context, in *ValidateTraceRequest, opts ...grpc.CallOption) (*ValidateTraceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTraceResponse)
	err := c.cc.Invoke(ctx, SemanticValidator_ValidateTrace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SemanticValidatorServer is the server API for SemanticValidator service.
// All implementations must embed UnimplementedSemanticValidatorServer
// for forward compatibility.
//
// *
// SemanticValidator service provides methods to validate statecharts and traces.
// It applies semantic validation rules to ensure correctness of statechart definitions.
type SemanticValidatorServer interface {
	// ValidateChart validates a statechart definition against semantic rules.
	ValidateChart(context.Context, *ValidateChartRequest) (*ValidateChartResponse, error)
	// ValidateTrace validates a statechart and a trace of machine states.
	ValidateTrace(context.Context, *ValidateTraceRequest) (*ValidateTraceResponse, error)
	mustEmbedUnimplementedSemanticValidatorServer()
}

// UnimplementedSemanticValidatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSemanticValidatorServer struct{}

func (UnimplementedSemanticValidatorServer) ValidateChart(context.Context, *ValidateChartRequest) (*ValidateChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateChart not implemented")
}
func (UnimplementedSemanticValidatorServer) ValidateTrace(context.Context, *ValidateTraceRequest) (*ValidateTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTrace not implemented")
}
func (UnimplementedSemanticValidatorServer) mustEmbedUnimplementedSemanticValidatorServer() {}
func (UnimplementedSemanticValidatorServer) testEmbeddedByValue()                           {}

// UnsafeSemanticValidatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SemanticValidatorServer will
// result in compilation errors.
type UnsafeSemanticValidatorServer interface {
	mustEmbedUnimplementedSemanticValidatorServer()
}

func RegisterSemanticValidatorServer(s grpc.ServiceRegistrar, srv SemanticValidatorServer) {
	// If the following call pancis, it indicates UnimplementedSemanticValidatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SemanticValidator_ServiceDesc, srv)
}

func _SemanticValidator_ValidateChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemanticValidatorServer).ValidateChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemanticValidator_ValidateChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemanticValidatorServer).ValidateChart(ctx, req.(*ValidateChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemanticValidator_ValidateTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemanticValidatorServer).ValidateTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemanticValidator_ValidateTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemanticValidatorServer).ValidateTrace(ctx, req.(*ValidateTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SemanticValidator_ServiceDesc is the grpc.ServiceDesc for SemanticValidator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SemanticValidator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statecharts.validation.v1.SemanticValidator",
	HandlerType: (*SemanticValidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateChart",
			Handler:    _SemanticValidator_ValidateChart_Handler,
		},
		{
			MethodName: "ValidateTrace",
			Handler:    _SemanticValidator_ValidateTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validation/v1/validator.proto",
}
