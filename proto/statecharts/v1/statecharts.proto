syntax = "proto3";

package statecharts.v1;

option go_package = "github.com/tmc/sc/gen/statecharts/v1;statechartspb";

import "google/protobuf/struct.proto";

// ===========================================================================
//  Static model for Harel statecharts with reconciled semantics.
// ===========================================================================

// ─────────────────────────── Root aggregate ────────────────────────────────

/** Complete, static description of a statechart. */
message Statechart {
  State       root_state  = 1;  // Root node, label must be "__root__".
  repeated Transition transitions = 2;
  repeated Event      events      = 3;  // Alphabet (superset allowed).
}

// ───────────────────────────── Enumerations ────────────────────────────────

/**
 * StateType describes the type of a state.
 * It can be a basic state, normal state, or parallel/orthogonal state.
 */
enum StateType {
  option allow_alias = true; // Allow aliases for compatible naming with academic literature
  STATE_TYPE_UNSPECIFIED = 0;  // Unspecified state type.
  STATE_TYPE_BASIC       = 1;  // A basic state (has no sub-states).
  STATE_TYPE_NORMAL      = 2;  // A normal state (has sub-states related by XOR semantics).
  STATE_TYPE_PARALLEL    = 3;  // A parallel state (has sub-states related by AND semantics).

  // Aliases for clarity with academic/literature terminology
  STATE_TYPE_ORTHOGONAL  = 3;  // An alias for STATE_TYPE_PARALLEL. An orthogonal state is a state with concurrently active sub-states (AND semantics).
}

/**
 * MachineState encodes the high-level state of a statechart.
 */
enum MachineState {
  MACHINE_STATE_UNSPECIFIED = 0;  // The machine is in an unspecified state.
  MACHINE_STATE_RUNNING     = 1;  // The machine is in a running state.
  MACHINE_STATE_STOPPED     = 2;  // The machine is in a stopped state.
}

// ─────────────────────────── Structural nodes ──────────────────────────────

/**
 * State represents a state in a statechart.
 * Each state has a label, type, and optionally sub-states (children).
 */
message State {
  string          label     = 1;    // The label of the state.
  StateType       type      = 2;    // The type of the state.
  repeated State  children  = 3;    // The sub-states. If a state has no sub-states, it is considered a BASIC state.
  bool            is_initial = 4;   // Default child of XOR composite.
  bool            is_final   = 5;   // Terminal child.
}

/**
 * Transition represents a transition between states in a statechart.
 * It connects source (from) states to target (to) states and is triggered by an event.
 */
message Transition {
  string          label   = 1;  // The label of the transition.
  repeated string from    = 2;  // The source (from) State reference(s).
  repeated string to      = 3;  // The target (to) State reference(s).
  string          event   = 4;  // The label of the event that triggers the transition.
  Guard           guard   = 5;  // The guard of the transition, a condition for the transition to occur.
  repeated Action actions = 6;  // The action(s) associated with the transition.
}

/** Event represents an event in a statechart. Each event has a label that identifies it. */
message Event  { string label = 1; }

/** Guard is a guard for a transition. It represents a condition that must be satisfied for the transition to occur. */
message Guard  { string expression = 1; }

/** Action is an action associated with a transition. Each action has a label that identifies it. */
message Action { string label = 1; }

/** StateRef is a reference to a state. It contains the label of the referenced state. */
message StateRef { string label = 1; }

/** Configuration is a status for a statechart, which is defined by a subset of the states that are active. */
message Configuration { repeated StateRef states = 1; }

// ───────────────────────────── Runtime trace ───────────────────────────────

/** Machine is an instance of a statechart. */
message Machine {
  string                 id            = 1;  // The id of the machine.
  MachineState           state         = 2;  // The overall state of the machine.
  google.protobuf.Struct context       = 3;  // The context of the machine.
  Statechart             statechart    = 4;  // The statechart definition.
  Configuration          configuration = 5;  // The current configuration of the machine.
  repeated Step          step_history  = 6;  // The history of steps that have been carried out by the machine.
}

/** Step is a step in the execution of a statechart. */
message Step {
  repeated Event        events                  = 1;  // The events that occurred.
  repeated Transition   transitions             = 2;  // The transitions that occurred.
  Configuration         starting_configuration  = 3;  // The starting configuration.
  Configuration         resulting_configuration = 4;  // The resulting configuration.
  google.protobuf.Struct context                = 5;  // The context of the event.
}
