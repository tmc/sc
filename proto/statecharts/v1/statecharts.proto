// Statecharts.
//
// This file defines a set of types that are used to represent statecharts.
//
// The design here is heavily inspired by both Harel's statecharts and the following paper:
// [Reconciling statechart semantics](https://www.sciencedirect.com/science/article/pii/S0167642308001020).
// 
// Statechart definition.
//
// A statechart SC is a tuple (S, T, E), with S a set of states, T - a set of transitions that connect the
// states, and E the set of events that transitions are triggered by. Set E is partitioned into sets E(ext)
// and E(int). Set E(ext) contains all external events, which are generated by the environment of the
// system, while set E(int) contains all internal events, which are generated by transitions in T.
syntax = "proto3";

package statecharts.v1;

import "google/protobuf/struct.proto";

// Statechart is the main data structure representing a statechart.
// It consists of a root state, a set of transitions, and a set of events.
message Statechart {
  // The root state of the statechart.
  State root_state  = 1;
  // Transitions is the set of transitions that connect the states.
  repeated Transition transitions = 2;
  // Events is the set of events that transitions are triggered by.
  repeated Event events = 3;
}

// StateType describes the type of a state.
// It can be a basic state, normal state, or parallel (orthogonal) state.
enum StateType {
  // Unspecified state type.
  STATE_TYPE_UNSPECIFIED = 0;
  // A basic state (has no sub-states).
  STATE_TYPE_BASIC = 1;
  // A normal state (has sub-states related by XOR semantics).
  STATE_TYPE_NORMAL = 2;
  // A parallel state (has sub-states related by AND semantics). Also known in the literature as an "orthogonal state".
  STATE_TYPE_PARALLEL = 3;
}

// State represents a state in a statechart.
// Each state has a label, type, and optionally sub-states (children).
message State {
  // The label of the state.
  string label = 1;
  // The type of the state.
  StateType type = 2;
  // The sub-states. If a state has no sub-states, it is considered a BASIC state.
  repeated State children = 3;
  // Indicates if the state is the initial state of its parent state.
  bool is_initial = 4;
  // Indicates if the state is the final state of its parent state.
  bool is_final = 5;
}

// Transition represents a transition between states in a statechart.
// It connects source (from) states to target (to) states and is triggered by an event.
message Transition {
  // The label of the transition.
  string label = 1;
  // The source (from) State reference(s).
  repeated string from = 2;
  // The target (to) State reference(s).
  repeated string to = 3;
  // The label of the event that triggers the transition.
  string event = 4;
  // The guard of the transition, a condition for the transition to occur.
  Guard guard = 5;
  // The action(s) associated with the transition.
  repeated Action actions = 6;
}

// Event represents an event in a statechart.
// Each event has a label that identifies it.
message Event {
  // The label of the event.
  string label = 1;
}

// Guard is a guard for a transition.
// It represents a condition that must be satisfied for the transition to occur.
message Guard {
  // The guard expression.
  string expression = 1;
}

// Action is an action associated with a transition.
// Each action has a label that identifies it.
message Action {
  // The label of the action.
  string label = 1;
}

// StateRef is a reference to a state.
// It contains the label of the referenced state.
message StateRef {
  // The label of the state.
  string label = 1;
}

// Configuration is a status for a statechart, which is defined by a subset of the states that are active.
message Configuration {
  // The set of states in the status.
  repeated StateRef states = 1;
}

// MachineState encodes the high-level state of a statechart.
enum MachineState {
  // The machine is in an unspecified state.
  MACHINE_STATE_UNSPECIFIED = 0;
  // The machine is in a running state.
  MACHINE_STATE_RUNNING = 1;
  // The machine is in a stopped state.
  MACHINE_STATE_STOPPED = 2;
}

// Machine is an instance of a statechart.
message Machine {
  // The id of the machine.
  string id = 1;
  // The overall state of the machine.
  MachineState state = 2;
  // The context of the machine.
  google.protobuf.Struct context = 3;
  // The statechart definition.
  Statechart statechart = 4;
  // The current configuration of the machine.
  Configuration configuration = 5;
  // The history of steps that have been carried out by the machine.
  repeated Step step_history = 6;
}

// Step is a step in the execution of a statechart.
message Step {
  // The events that occurred.
  repeated Event events = 1;
  // The transitions that occurred.
  repeated Transition transitions = 2;
  // The starting configuration.
  Configuration starting_configuration = 3;
  // The resulting configuration.
  Configuration resulting_configuration = 4;
  // The context of the event.
  google.protobuf.Struct context = 5;
}
