// Statecharts.
//
// This file defines a set of types that are used to represent statecharts.
//
// The design here is heavily inspired by both Harel's statecharts and the following paper:
// [Reconciling statechart semantics](https://www.sciencedirect.com/science/article/pii/S0167642308001020).
// 
// A statechart SC is a tuple (S, T, E), with S a set of states, T - a set of transitions that connect the
// states, and E the set of events that transitions are triggered by. Set E is partitioned into sets E(ext)
// and E(int). Set E(ext) contains all external events, which are generated by the environment of the 
// system, while set E(int) contains all internal events, which are generated by transitions in T.
syntax = "proto3";

package statecharts.v1;

import "google/protobuf/struct.proto";

// StateChart definition.
message StateChart {
  // The top-level states in the statechart.
  repeated State states = 1;
  // Transitions is the set of transitions that connect the states.
  repeated Transition transistions = 2;
  // Events is the set of events that transitions are triggered by.
  repeated Event events = 3;
}

// The type of the state.
enum StateType {
  // Unspecified state type.
  STATE_TYPE_UNSPECIFIED = 0;
  // A basic state (has no sub-states).
  STATE_TYPE_BASIC = 1;
  // A normal state (has sub-states related by XOR semantics).
  STATE_TYPE_NORMAL = 2;
  // A parallel state (has sub-states related by AND semantics).
  STATE_TYPE_PARALLEL = 3;
  // An initial state.
  STATE_TYPE_INITIAL = 4;
  // A final state.
  STATE_TYPE_FINAL = 5;
}

// A state within a statechart.
message State {
  // The label of the state.
  string label = 1;
  // The sub-states. If a state has no sub-states, it is considered a BASIC state.
  repeated State children = 2;
  // The type of the state.
  StateType type = 3;
}

// A transition.
message Transition {
  // The from State reference.
  string from = 1;
  // The to State 
  string to = 2;
  // The label of the event that triggers the transition.
  string event = 3;
  // The guard of the transition.
  Guard guard = 4;
  // The action(s) of the transition.
  repeated Action actions = 5;
}

// An event.
message Event {
  // The label of the event.
  string label = 1;
}

// A guard.
message Guard {
  // The guard expression.
  string expression = 1;
}

// An action.
message Action {
  // The label of the action.
  string label = 1;
}

// A reference to a state.
message StateRef {
  // The label of the state.
  string label = 1;
}

// A configuration is a subset of states in a statechart representing the current state of the machine.
message Configuration {
  // The set of states in the configuration.
  repeated StateRef states = 1;
}


// The possible states a machine can be in.
enum MachineState {
  // The machine is in an unspecified state.
  MACHINE_STATE_UNSPECIFIED = 0;
  // The machine is in a running state.
  MACHINE_STATE_RUNNING = 1;
  // The machine is in a stopped state.
  MACHINE_STATE_STOPPED = 2;
}

// A Machine is an instance of a statechart.
message Machine {
  // The id of the machine.
  string id = 1;
  // The overall state of the machine.
  MachineState state = 2;
  // The context of the machine.
  google.protobuf.Struct context = 3;
  // The statechart definition.
  StateChart statechart = 4;
  // The current configuration of the machine.
  Configuration configuration = 5;
// The history of events that have occurred on the machine.
  repeated EventHistoryEntry event_history = 6;
// The history of transitions that have occurred on the machine.
  repeated TransitionHistoryEntry transition_history = 7;
}

// An event history entry.
message EventHistoryEntry {
  // The event that occurred.
  string event = 1;
  // The context of the event.
  google.protobuf.Struct context = 2;
}

// A transition history entry.
message TransitionHistoryEntry {
  // The transition that occurred.
  string transition = 1;
  // The context of the transition.
  google.protobuf.Struct context = 2;
}
